{横坐标: (  纵坐标: constInitVal}	文法: constInitVal->[constExp]
{横坐标: >=  纵坐标: addExpAtom}	文法: addExpAtom->[$]
{横坐标: <  纵坐标: addExpAtom}	文法: addExpAtom->[$]
{横坐标: ;  纵坐标: eqExpAtom}	文法: eqExpAtom->[$]
{横坐标: INT  纵坐标: number}	文法: number->[INT]
{横坐标: ;  纵坐标: assignExpAtom}	文法: assignExpAtom->[$]
{横坐标: +  纵坐标: unaryExp}	文法: unaryExp->[unaryOp, unaryExp]
{横坐标: )  纵坐标: argFunctionR}	文法: argFunctionR->[$]
{横坐标: int  纵坐标: bType}	文法: bType->[int]
{横坐标: (  纵坐标: unaryExp}	文法: unaryExp->[primaryExp]
{横坐标: =  纵坐标: assignExpAtom}	文法: assignExpAtom->[=, eqExp, assignExpAtom]
{横坐标: Ident  纵坐标: constExp}	文法: constExp->[assignExp]
{横坐标: (  纵坐标: initVal}	文法: initVal->[exp]
{横坐标: +  纵坐标: constExp}	文法: constExp->[assignExp]
{横坐标: #  纵坐标: argVarDecl}	文法: argVarDecl->[$]
{横坐标: !  纵坐标: assignExp}	文法: assignExp->[eqExp, assignExpAtom]
{横坐标: #  纵坐标: mulExpAtom}	文法: mulExpAtom->[$]
{横坐标: !  纵坐标: funcRParams}	文法: funcRParams->[funcRParam, argFunctionR]
{横坐标: )  纵坐标: funcFParams}	文法: funcFParams->[$]
{横坐标: }  纵坐标: blockItem}	文法: blockItem->[$]
{横坐标: >  纵坐标: addExpAtom}	文法: addExpAtom->[$]
{横坐标: (  纵坐标: constExp}	文法: constExp->[assignExp]
{横坐标: =  纵坐标: addExpAtom}	文法: addExpAtom->[$]
{横坐标: ;  纵坐标: argVarDecl}	文法: argVarDecl->[$]
{横坐标: {  纵坐标: block}	文法: block->[{, blockItem, }]
{横坐标: )  纵坐标: eqExpAtom}	文法: eqExpAtom->[$]
{横坐标: )  纵坐标: assignExpAtom}	文法: assignExpAtom->[$]
{横坐标: int  纵坐标: compUnit}	文法: compUnit->[decl, compUnit]
{横坐标: INT  纵坐标: argExp}	文法: argExp->[exp]
{横坐标: !  纵坐标: mulExp}	文法: mulExp->[unaryExp, mulExpAtom]
{横坐标: ;  纵坐标: argConst}	文法: argConst->[$]
{横坐标: +  纵坐标: addExp}	文法: addExp->[mulExp, addExpAtom]
{横坐标: Ident  纵坐标: exp}	文法: exp->[assignExp]
{横坐标: ;  纵坐标: argVarDef}	文法: argVarDef->[$]
{横坐标: ;  纵坐标: mulExpAtom}	文法: mulExpAtom->[$]
{横坐标: Ident  纵坐标: relExp}	文法: relExp->[addExp, relExpAtom]
{横坐标: #  纵坐标: blockItem}	文法: blockItem->[$]
{横坐标: ;  纵坐标: argExp}	文法: argExp->[$]
{横坐标: #  纵坐标: addExpAtom}	文法: addExpAtom->[$]
{横坐标: int  纵坐标: funcFParams}	文法: funcFParams->[funcFParam, argFunctionF]
{横坐标: #  纵坐标: callFunc}	文法: callFunc->[$]
{横坐标: )  纵坐标: callFunc}	文法: callFunc->[$]
{横坐标: ==  纵坐标: eqExpAtom}	文法: eqExpAtom->[==, relExp, eqExpAtom]
{横坐标: ;  纵坐标: addExpAtom}	文法: addExpAtom->[$]
{横坐标: <  纵坐标: relExpAtom}	文法: relExpAtom->[<, addExp, relExpAtom]
{横坐标: INT  纵坐标: relExp}	文法: relExp->[addExp, relExpAtom]
{横坐标: !  纵坐标: eqExp}	文法: eqExp->[relExp, eqExpAtom]
{横坐标: ,  纵坐标: argConst}	文法: argConst->[,, constDef, argConst]
{横坐标: #  纵坐标: argConst}	文法: argConst->[$]
{横坐标: ==  纵坐标: callFunc}	文法: callFunc->[$]
{横坐标: +  纵坐标: mulExp}	文法: mulExp->[unaryExp, mulExpAtom]
{横坐标: !  纵坐标: addExp}	文法: addExp->[mulExp, addExpAtom]
{横坐标: !  纵坐标: constInitVal}	文法: constInitVal->[constExp]
{横坐标: -  纵坐标: blockItem}	文法: blockItem->[stmt, blockItem]
{横坐标: INT  纵坐标: funcRParams}	文法: funcRParams->[funcRParam, argFunctionR]
{横坐标: (  纵坐标: argExp}	文法: argExp->[exp]
{横坐标: !  纵坐标: stmt}	文法: stmt->[exp, ;]
{横坐标: +  纵坐标: addExpAtom}	文法: addExpAtom->[+, mulExp, addExpAtom]
{横坐标: INT  纵坐标: mulExp}	文法: mulExp->[unaryExp, mulExpAtom]
{横坐标: !  纵坐标: argExp}	文法: argExp->[exp]
{横坐标: >  纵坐标: relExpAtom}	文法: relExpAtom->[>, addExp, relExpAtom]
{横坐标: -  纵坐标: constInitVal}	文法: constInitVal->[constExp]
{横坐标: -  纵坐标: mulExp}	文法: mulExp->[unaryExp, mulExpAtom]
{横坐标: +  纵坐标: assignExp}	文法: assignExp->[eqExp, assignExpAtom]
{横坐标: #  纵坐标: assignExpAtom}	文法: assignExpAtom->[$]
{横坐标: INT  纵坐标: initVal}	文法: initVal->[exp]
{横坐标: +  纵坐标: stmt}	文法: stmt->[exp, ;]
{横坐标: -  纵坐标: stmt}	文法: stmt->[exp, ;]
{横坐标: int  纵坐标: decl}	文法: decl->[varDecl]
{横坐标: INT  纵坐标: primaryExp}	文法: primaryExp->[number]
{横坐标: !  纵坐标: unaryExp}	文法: unaryExp->[unaryOp, unaryExp]
{横坐标: Ident  纵坐标: initVal}	文法: initVal->[exp]
{横坐标: INT  纵坐标: blockItem}	文法: blockItem->[stmt, blockItem]
{横坐标: INT  纵坐标: unaryExp}	文法: unaryExp->[primaryExp]
{横坐标: +  纵坐标: unaryOp}	文法: unaryOp->[+]
{横坐标: INT  纵坐标: eqExp}	文法: eqExp->[relExp, eqExpAtom]
{横坐标: -  纵坐标: funcRParam}	文法: funcRParam->[exp]
{横坐标: <  纵坐标: mulExpAtom}	文法: mulExpAtom->[$]
{横坐标: #  纵坐标: argFunctionR}	文法: argFunctionR->[$]
{横坐标: #  纵坐标: funcFParams}	文法: funcFParams->[$]
{横坐标: !  纵坐标: initVal}	文法: initVal->[exp]
{横坐标: +  纵坐标: blockItem}	文法: blockItem->[stmt, blockItem]
{横坐标: -  纵坐标: callFunc}	文法: callFunc->[$]
{横坐标: ;  纵坐标: relExpAtom}	文法: relExpAtom->[$]
{横坐标: (  纵坐标: exp}	文法: exp->[assignExp]
{横坐标: #  纵坐标: argExp}	文法: argExp->[$]
{横坐标: *  纵坐标: callFunc}	文法: callFunc->[$]
{横坐标: ,  纵坐标: eqExpAtom}	文法: eqExpAtom->[$]
{横坐标: *  纵坐标: mulExpAtom}	文法: mulExpAtom->[*, unaryExp, mulExpAtom]
{横坐标: <=  纵坐标: callFunc}	文法: callFunc->[$]
{横坐标: !  纵坐标: constExp}	文法: constExp->[assignExp]
{横坐标: ;  纵坐标: stmt}	文法: stmt->[;]
{横坐标: -  纵坐标: constExp}	文法: constExp->[assignExp]
{横坐标: !  纵坐标: relExp}	文法: relExp->[addExp, relExpAtom]
{横坐标: int  纵坐标: program}	文法: program->[compUnit]
{横坐标: INT  纵坐标: addExp}	文法: addExp->[mulExp, addExpAtom]
{横坐标: Ident  纵坐标: addExp}	文法: addExp->[mulExp, addExpAtom]
{横坐标: Ident  纵坐标: unaryExp}	文法: unaryExp->[Ident, callFunc]
{横坐标: <  纵坐标: callFunc}	文法: callFunc->[$]
{横坐标: #  纵坐标: relExpAtom}	文法: relExpAtom->[$]
{横坐标: INT  纵坐标: stmt}	文法: stmt->[exp, ;]
{横坐标: int  纵坐标: blockItem}	文法: blockItem->[decl, blockItem]
{横坐标: (  纵坐标: blockItem}	文法: blockItem->[stmt, blockItem]
{横坐标: void  纵坐标: funcDef}	文法: funcDef->[funcType, Ident, (, funcFParams, ), block]
{横坐标: const  纵坐标: constDecl}	文法: constDecl->[const, bType, constDef, argConst, ;]
{横坐标: INT  纵坐标: funcRParam}	文法: funcRParam->[exp]
{横坐标: (  纵坐标: assignExp}	文法: assignExp->[eqExp, assignExpAtom]
{横坐标: INT  纵坐标: assignExp}	文法: assignExp->[eqExp, assignExpAtom]
{横坐标: ,  纵坐标: mulExpAtom}	文法: mulExpAtom->[$]
{横坐标: #  纵坐标: argFunctionF}	文法: argFunctionF->[$]
{横坐标: ,  纵坐标: argVarDef}	文法: argVarDef->[$]
{横坐标: Ident  纵坐标: constDef}	文法: constDef->[Ident, =, constInitVal]
{横坐标: Ident  纵坐标: mulExp}	文法: mulExp->[unaryExp, mulExpAtom]
{横坐标: !=  纵坐标: mulExpAtom}	文法: mulExpAtom->[$]
{横坐标: +  纵坐标: mulExpAtom}	文法: mulExpAtom->[$]
{横坐标: <=  纵坐标: relExpAtom}	文法: relExpAtom->[<=, addExp, relExpAtom]
{横坐标: !=  纵坐标: eqExpAtom}	文法: eqExpAtom->[!=, relExp, eqExpAtom]
{横坐标: void  纵坐标: compUnit}	文法: compUnit->[funcDef, compUnit]
{横坐标: -  纵坐标: exp}	文法: exp->[assignExp]
{横坐标: (  纵坐标: funcRParam}	文法: funcRParam->[exp]
{横坐标: -  纵坐标: addExp}	文法: addExp->[mulExp, addExpAtom]
{横坐标: ,  纵坐标: argFunctionF}	文法: argFunctionF->[,, funcFParam, argFunctionF]
{横坐标: (  纵坐标: callFunc}	文法: callFunc->[(, funcRParams, )]
{横坐标: #  纵坐标: argVarDef}	文法: argVarDef->[$]
{横坐标: ,  纵坐标: relExpAtom}	文法: relExpAtom->[$]
{横坐标: -  纵坐标: eqExp}	文法: eqExp->[relExp, eqExpAtom]
{横坐标: Ident  纵坐标: argExp}	文法: argExp->[exp]
{横坐标: +  纵坐标: funcRParams}	文法: funcRParams->[funcRParam, argFunctionR]
{横坐标: Ident  纵坐标: funcRParam}	文法: funcRParam->[exp]
{横坐标: return  纵坐标: blockItem}	文法: blockItem->[stmt, blockItem]
{横坐标: !  纵坐标: blockItem}	文法: blockItem->[stmt, blockItem]
{横坐标: (  纵坐标: addExp}	文法: addExp->[mulExp, addExpAtom]
{横坐标: (  纵坐标: funcRParams}	文法: funcRParams->[funcRParam, argFunctionR]
{横坐标: %  纵坐标: callFunc}	文法: callFunc->[$]
{横坐标: Ident  纵坐标: stmt}	文法: stmt->[exp, ;]
{横坐标: +  纵坐标: callFunc}	文法: callFunc->[$]
{横坐标: =  纵坐标: callFunc}	文法: callFunc->[$]
{横坐标: /  纵坐标: mulExpAtom}	文法: mulExpAtom->[/, unaryExp, mulExpAtom]
{横坐标: +  纵坐标: initVal}	文法: initVal->[exp]
{横坐标: (  纵坐标: primaryExp}	文法: primaryExp->[(, exp, )]
{横坐标: const  纵坐标: program}	文法: program->[compUnit]
{横坐标: -  纵坐标: unaryExp}	文法: unaryExp->[unaryOp, unaryExp]
{横坐标: !  纵坐标: unaryOp}	文法: unaryOp->[!]
{横坐标: -  纵坐标: unaryOp}	文法: unaryOp->[-]
{横坐标: {  纵坐标: blockItem}	文法: blockItem->[stmt, blockItem]
{横坐标: #  纵坐标: eqExpAtom}	文法: eqExpAtom->[$]
{横坐标: +  纵坐标: funcRParam}	文法: funcRParam->[exp]
{横坐标: -  纵坐标: addExpAtom}	文法: addExpAtom->[-, mulExp, addExpAtom]
{横坐标: =  纵坐标: eqExpAtom}	文法: eqExpAtom->[$]
{横坐标: -  纵坐标: mulExpAtom}	文法: mulExpAtom->[$]
{横坐标: #  纵坐标: compUnit}	文法: compUnit->[$]
{横坐标: !=  纵坐标: relExpAtom}	文法: relExpAtom->[$]
{横坐标: return  纵坐标: stmt}	文法: stmt->[return, argExp, ;]
{横坐标: Ident  纵坐标: constInitVal}	文法: constInitVal->[constExp]
{横坐标: )  纵坐标: relExpAtom}	文法: relExpAtom->[$]
{横坐标: Ident  纵坐标: funcRParams}	文法: funcRParams->[funcRParam, argFunctionR]
{横坐标: -  纵坐标: assignExp}	文法: assignExp->[eqExp, assignExpAtom]
{横坐标: ,  纵坐标: argVarDecl}	文法: argVarDecl->[,, varDef, argVarDecl]
{横坐标: !  纵坐标: exp}	文法: exp->[assignExp]
{横坐标: +  纵坐标: constInitVal}	文法: constInitVal->[constExp]
{横坐标: (  纵坐标: mulExp}	文法: mulExp->[unaryExp, mulExpAtom]
{横坐标: =  纵坐标: mulExpAtom}	文法: mulExpAtom->[$]
{横坐标: )  纵坐标: argFunctionF}	文法: argFunctionF->[$]
{横坐标: const  纵坐标: decl}	文法: decl->[constDecl]
{横坐标: ;  纵坐标: callFunc}	文法: callFunc->[$]
{横坐标: >  纵坐标: callFunc}	文法: callFunc->[$]
{横坐标: <=  纵坐标: addExpAtom}	文法: addExpAtom->[$]
{横坐标: ,  纵坐标: assignExpAtom}	文法: assignExpAtom->[$]
{横坐标: /  纵坐标: callFunc}	文法: callFunc->[$]
{横坐标: Ident  纵坐标: lVal}	文法: lVal->[Ident]
{横坐标: (  纵坐标: eqExp}	文法: eqExp->[relExp, eqExpAtom]
{横坐标: =  纵坐标: relExpAtom}	文法: relExpAtom->[$]
{横坐标: void  纵坐标: program}	文法: program->[compUnit]
{横坐标: +  纵坐标: argExp}	文法: argExp->[exp]
{横坐标: >  纵坐标: mulExpAtom}	文法: mulExpAtom->[$]
{横坐标: INT  纵坐标: constExp}	文法: constExp->[assignExp]
{横坐标: ,  纵坐标: callFunc}	文法: callFunc->[$]
{横坐标: ,  纵坐标: addExpAtom}	文法: addExpAtom->[$]
{横坐标: Ident  纵坐标: blockItem}	文法: blockItem->[stmt, blockItem]
{横坐标: -  纵坐标: relExp}	文法: relExp->[addExp, relExpAtom]
{横坐标: -  纵坐标: initVal}	文法: initVal->[exp]
{横坐标: (  纵坐标: relExp}	文法: relExp->[addExp, relExpAtom]
{横坐标: ,  纵坐标: argFunctionR}	文法: argFunctionR->[,, funcRParam, argFunctionR]
{横坐标: ==  纵坐标: relExpAtom}	文法: relExpAtom->[$]
{横坐标: >=  纵坐标: relExpAtom}	文法: relExpAtom->[>=, addExp, relExpAtom]
{横坐标: const  纵坐标: compUnit}	文法: compUnit->[decl, compUnit]
{横坐标: =  纵坐标: argVarDef}	文法: argVarDef->[=, initVal]
{横坐标: (  纵坐标: stmt}	文法: stmt->[exp, ;]
{横坐标: Ident  纵坐标: eqExp}	文法: eqExp->[relExp, eqExpAtom]
{横坐标: ;  纵坐标: blockItem}	文法: blockItem->[stmt, blockItem]
{横坐标: +  纵坐标: eqExp}	文法: eqExp->[relExp, eqExpAtom]
{横坐标: !=  纵坐标: callFunc}	文法: callFunc->[$]
{横坐标: -  纵坐标: funcRParams}	文法: funcRParams->[funcRParam, argFunctionR]
{横坐标: )  纵坐标: funcRParams}	文法: funcRParams->[$]
{横坐标: )  纵坐标: mulExpAtom}	文法: mulExpAtom->[$]
{横坐标: !  纵坐标: funcRParam}	文法: funcRParam->[exp]
{横坐标: >=  纵坐标: callFunc}	文法: callFunc->[$]
{横坐标: #  纵坐标: funcRParams}	文法: funcRParams->[$]
{横坐标: +  纵坐标: exp}	文法: exp->[assignExp]
{横坐标: int  纵坐标: varDecl}	文法: varDecl->[bType, varDef, argVarDecl, ;]
{横坐标: Ident  纵坐标: varDef}	文法: varDef->[Ident, argVarDef]
{横坐标: -  纵坐标: argExp}	文法: argExp->[exp]
{横坐标: ==  纵坐标: addExpAtom}	文法: addExpAtom->[$]
{横坐标: const  纵坐标: blockItem}	文法: blockItem->[decl, blockItem]
{横坐标: INT  纵坐标: constInitVal}	文法: constInitVal->[constExp]
{横坐标: )  纵坐标: addExpAtom}	文法: addExpAtom->[$]
{横坐标: Ident  纵坐标: assignExp}	文法: assignExp->[eqExp, assignExpAtom]
{横坐标: {  纵坐标: stmt}	文法: stmt->[block]
{横坐标: INT  纵坐标: exp}	文法: exp->[assignExp]
{横坐标: %  纵坐标: mulExpAtom}	文法: mulExpAtom->[%, unaryExp, mulExpAtom]
{横坐标: ==  纵坐标: mulExpAtom}	文法: mulExpAtom->[$]
{横坐标: >=  纵坐标: mulExpAtom}	文法: mulExpAtom->[$]
{横坐标: <=  纵坐标: mulExpAtom}	文法: mulExpAtom->[$]
{横坐标: void  纵坐标: funcType}	文法: funcType->[void]
{横坐标: !=  纵坐标: addExpAtom}	文法: addExpAtom->[$]
{横坐标: +  纵坐标: relExp}	文法: relExp->[addExp, relExpAtom]
{横坐标: int  纵坐标: funcFParam}	文法: funcFParam->[bType, Ident]
