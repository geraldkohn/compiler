argFunctionR	[), #]
eqExpAtom	[=, ,, ;, ), #]
decl	[const, void, int, ;, {, return, +, -, !, Ident, (, INT, }, #]
constInitVal	[,, ;, #]
constDef	[,, ;, #]
compUnit	[#]
funcRParam	[,, ), #]
addExp	[<, >, <=, >=, ==, !=, =, ,, ;, ), #]
unaryOp	[+, -, !, Ident, (, INT, #]
program	[#]
addExpAtom	[<, >, <=, >=, ==, !=, =, ,, ;, ), #]
mulExpAtom	[+, -, <, >, <=, >=, ==, !=, =, ,, ;, ), #]
relExp	[==, !=, =, ,, ;, ), #]
funcRParams	[), #]
argVarDecl	[;, #]
initVal	[,, ;, #]
number	[*, /, %, +, -, <, >, <=, >=, ==, !=, =, ,, ;, ), #]
argConst	[;, #]
eqExp	[=, ,, ;, ), #]
funcFParams	[), #]
block	[const, void, int, ;, {, return, +, -, !, Ident, (, INT, }, #]
mulExp	[+, -, <, >, <=, >=, ==, !=, =, ,, ;, ), #]
argExp	[;, #]
exp	[,, ;, ), #]
constExp	[,, ;, #]
funcType	[Ident, #]
assignExp	[,, ;, ), #]
relExpAtom	[==, !=, =, ,, ;, ), #]
lVal	[#]
constDecl	[const, void, int, ;, {, return, +, -, !, Ident, (, INT, }, #]
assignExpAtom	[,, ;, ), #]
callFunc	[*, /, %, +, -, <, >, <=, >=, ==, !=, =, ,, ;, ), #]
bType	[Ident, #]
unaryExp	[*, /, %, +, -, <, >, <=, >=, ==, !=, =, ,, ;, ), #]
argVarDef	[,, ;, #]
funcFParam	[,, ), #]
varDef	[,, ;, #]
primaryExp	[*, /, %, +, -, <, >, <=, >=, ==, !=, =, ,, ;, ), #]
blockItem	[}, #]
argFunctionF	[), #]
varDecl	[const, void, int, ;, {, return, +, -, !, Ident, (, INT, }, #]
stmt	[const, ;, {, return, int, +, -, !, Ident, (, INT, }, #]
funcDef	[const, void, int, #]
